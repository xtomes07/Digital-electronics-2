
interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c90  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f6  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00002127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                             // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  a8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_low+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_low+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_write_high+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_write_high+0xa>
  d4:	24 2b       	or	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRB, LED_D2);
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	84 e2       	ldi	r24, 0x24	; 36
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRB, LED_D3);
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	84 e2       	ldi	r24, 0x24	; 36
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRB, LED_D4);
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	84 e2       	ldi	r24, 0x24	; 36
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    
    GPIO_write_low(&PORTB, LED_D1);
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D2);
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D3);
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_low(&PORTB, LED_D4);
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 13a:	ef e6       	ldi	r30, 0x6F	; 111
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 144:	78 94       	sei
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x6c>

00000148 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
switch (i)
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	09 f4       	brne	.+2      	; 0x17a <__vector_13+0x32>
 178:	4c c0       	rjmp	.+152    	; 0x212 <__vector_13+0xca>
 17a:	2c f4       	brge	.+10     	; 0x186 <__vector_13+0x3e>
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	69 f0       	breq	.+26     	; 0x19a <__vector_13+0x52>
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	49 f1       	breq	.+82     	; 0x1d6 <__vector_13+0x8e>
 184:	b8 c0       	rjmp	.+368    	; 0x2f6 <__vector_13+0x1ae>
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	91 05       	cpc	r25, r1
 18a:	09 f4       	brne	.+2      	; 0x18e <__vector_13+0x46>
 18c:	7e c0       	rjmp	.+252    	; 0x28a <__vector_13+0x142>
 18e:	0c f4       	brge	.+2      	; 0x192 <__vector_13+0x4a>
 190:	5e c0       	rjmp	.+188    	; 0x24e <__vector_13+0x106>
 192:	05 97       	sbiw	r24, 0x05	; 5
 194:	09 f4       	brne	.+2      	; 0x198 <__vector_13+0x50>
 196:	97 c0       	rjmp	.+302    	; 0x2c6 <__vector_13+0x17e>
 198:	ae c0       	rjmp	.+348    	; 0x2f6 <__vector_13+0x1ae>
{
    case 0:
    GPIO_write_low(&PORTB, LED_D1);
 19a:	65 e0       	ldi	r22, 0x05	; 5
 19c:	85 e2       	ldi	r24, 0x25	; 37
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D2);
 1a4:	64 e0       	ldi	r22, 0x04	; 4
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D3);
 1ae:	63 e0       	ldi	r22, 0x03	; 3
 1b0:	85 e2       	ldi	r24, 0x25	; 37
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D4);
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	85 e2       	ldi	r24, 0x25	; 37
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    i++;
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    break;
 1d4:	90 c0       	rjmp	.+288    	; 0x2f6 <__vector_13+0x1ae>

    case 1:
    GPIO_write_high(&PORTB, LED_D1);
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D2);
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	85 e2       	ldi	r24, 0x25	; 37
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D3);
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	85 e2       	ldi	r24, 0x25	; 37
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D4);
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	85 e2       	ldi	r24, 0x25	; 37
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    i++;
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 202:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    break;
 210:	72 c0       	rjmp	.+228    	; 0x2f6 <__vector_13+0x1ae>
    
    case 2:
    GPIO_write_high(&PORTB, LED_D1);
 212:	65 e0       	ldi	r22, 0x05	; 5
 214:	85 e2       	ldi	r24, 0x25	; 37
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D2);
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	85 e2       	ldi	r24, 0x25	; 37
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D3);
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	85 e2       	ldi	r24, 0x25	; 37
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D4);
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	85 e2       	ldi	r24, 0x25	; 37
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    i++;
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 23e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    break;
 24c:	54 c0       	rjmp	.+168    	; 0x2f6 <__vector_13+0x1ae>
    
    case 3:
    GPIO_write_high(&PORTB, LED_D1);
 24e:	65 e0       	ldi	r22, 0x05	; 5
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D2);
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	85 e2       	ldi	r24, 0x25	; 37
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D3);
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D4);
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	85 e2       	ldi	r24, 0x25	; 37
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    i++;
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 284:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    break;
 288:	36 c0       	rjmp	.+108    	; 0x2f6 <__vector_13+0x1ae>
    
    case 4:
    GPIO_write_high(&PORTB, LED_D1);
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	85 e2       	ldi	r24, 0x25	; 37
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D2);
 294:	64 e0       	ldi	r22, 0x04	; 4
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D3);
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D4);
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	85 e2       	ldi	r24, 0x25	; 37
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    i++;
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    break;
 2c4:	18 c0       	rjmp	.+48     	; 0x2f6 <__vector_13+0x1ae>
    
    case 5:
    GPIO_write_high(&PORTB, LED_D1);
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	85 e2       	ldi	r24, 0x25	; 37
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_low(&PORTB, LED_D2);
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	85 e2       	ldi	r24, 0x25	; 37
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
    GPIO_write_high(&PORTB, LED_D3);
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_write_high(&PORTB, LED_D4);
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	85 e2       	ldi	r24, 0x25	; 37
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    i = 0;
 2ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    break;
    
    
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
