
05-segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000276  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da3  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083e  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000553  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000527  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cc  00000000  00000000  000025ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 b6 00 	call	0x16c	; 0x16c <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 c6 00 	call	0x18c	; 0x18c <SEG_update_shift_regs>

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24


    // Enables interrupts by setting the global interrupt mask
    sei();
 106:	78 94       	sei
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x28>

0000010a <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
    static uint8_t val = 9;  // This line will only run the first time
    // WRITE YOUR CODE HERE
    val--;
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 130:	81 50       	subi	r24, 0x01	; 1
    if(val == 0)
 132:	19 f0       	breq	.+6      	; 0x13a <__vector_13+0x30>
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
    static uint8_t val = 9;  // This line will only run the first time
    // WRITE YOUR CODE HERE
    val--;
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 138:	03 c0       	rjmp	.+6      	; 0x140 <__vector_13+0x36>
    if(val == 0)
       val = 9;
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
       
    SEG_update_shift_regs(val, 0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 146:	0e 94 c6 00 	call	0x18c	; 0x18c <SEG_update_shift_regs>

}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 16c:	64 e0       	ldi	r22, 0x04	; 4
 16e:	8a e2       	ldi	r24, 0x2A	; 42
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 176:	67 e0       	ldi	r22, 0x07	; 7
 178:	8a e2       	ldi	r24, 0x2A	; 42
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	84 e2       	ldi	r24, 0x24	; 36
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 18a:	08 95       	ret

0000018c <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 192:	e8 2f       	mov	r30, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	eb 5f       	subi	r30, 0xFB	; 251
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 19c:	e6 2f       	mov	r30, r22
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 5f       	subi	r30, 0xFF	; 255
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	d0 81       	ld	r29, Z
  
    

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	8b e2       	ldi	r24, 0x2B	; 43
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 1b0:	67 e0       	ldi	r22, 0x07	; 7
 1b2:	8b e2       	ldi	r24, 0x2B	; 43
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <SEG_update_shift_regs+0x3a>
 1ca:	00 00       	nop
 1cc:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 0b00000001) == 0)
 1ce:	10 fd       	sbrc	r17, 0
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <SEG_update_shift_regs+0x52>
            GPIO_write_low(&PORTB, SEG_DATA);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <SEG_update_shift_regs+0x5c>
        else
            GPIO_write_high(&PORTB, SEG_DATA);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <SEG_update_shift_regs+0x5e>
 1ee:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	8b e2       	ldi	r24, 0x2B	; 43
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <SEG_update_shift_regs+0x70>
 200:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 202:	67 e0       	ldi	r22, 0x07	; 7
 204:	8b e2       	ldi	r24, 0x2B	; 43
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 20c:	16 95       	lsr	r17
 20e:	c1 50       	subi	r28, 0x01	; 1

    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 210:	f1 f6       	brne	.-68     	; 0x1ce <SEG_update_shift_regs+0x42>
 212:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((position & 0b00000001) == 0)
 214:	d0 fd       	sbrc	r29, 0
 216:	06 c0       	rjmp	.+12     	; 0x224 <SEG_update_shift_regs+0x98>
        GPIO_write_low(&PORTB, SEG_DATA);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 222:	05 c0       	rjmp	.+10     	; 0x22e <SEG_update_shift_regs+0xa2>
        else
        GPIO_write_high(&PORTB, SEG_DATA);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	85 e2       	ldi	r24, 0x25	; 37
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <SEG_update_shift_regs+0xa4>
 234:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 236:	67 e0       	ldi	r22, 0x07	; 7
 238:	8b e2       	ldi	r24, 0x2B	; 43
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <SEG_update_shift_regs+0xb6>
 246:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 248:	67 e0       	ldi	r22, 0x07	; 7
 24a:	8b e2       	ldi	r24, 0x2B	; 43
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 252:	d6 95       	lsr	r29
 254:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 256:	f1 f6       	brne	.-68     	; 0x214 <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	8b e2       	ldi	r24, 0x2B	; 43
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <SEG_update_shift_regs+0xd8>
 268:	00 00       	nop
    // Wait 1 us
    _delay_us(1);

}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
