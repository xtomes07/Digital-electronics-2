
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000025c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d98  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083e  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000546  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cc  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000028cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                             // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 a9 00 	call	0x152	; 0x152 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0b00001101, 0b00010000);
  e4:	60 e1       	ldi	r22, 0x10	; 16
  e6:	8d e0       	ldi	r24, 0x0D	; 13
  e8:	0e 94 b9 00 	call	0x172	; 0x172 <SEG_update_shift_regs>
    // Set the overflow prescaler to 262 ms and enable interrupt
   /* TIM1_overflow_262ms();
    TIM1_overflow_interrupt_enable();*/

    // Enables interrupts by setting the global interrupt mask
    sei();
  ec:	78 94       	sei
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0xe>

000000f0 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
    static uint8_t val = 9;  // This line will only run the first time
    // WRITE YOUR CODE HERE
    val--;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 116:	81 50       	subi	r24, 0x01	; 1
    if(val == 0)
 118:	19 f0       	breq	.+6      	; 0x120 <__vector_13+0x30>
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
    static uint8_t val = 9;  // This line will only run the first time
    // WRITE YOUR CODE HERE
    val--;
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 11e:	03 c0       	rjmp	.+6      	; 0x126 <__vector_13+0x36>
    if(val == 0)
    val = 9;
 120:	89 e0       	ldi	r24, 0x09	; 9
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    
    SEG_update_shift_regs(val, 0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12c:	0e 94 b9 00 	call	0x172	; 0x172 <SEG_update_shift_regs>

}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 152:	64 e0       	ldi	r22, 0x04	; 4
 154:	8a e2       	ldi	r24, 0x2A	; 42
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 15c:	67 e0       	ldi	r22, 0x07	; 7
 15e:	8a e2       	ldi	r24, 0x2A	; 42
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	84 e2       	ldi	r24, 0x24	; 36
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 170:	08 95       	ret

00000172 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value [segments];
 178:	e8 2f       	mov	r30, r24
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	eb 5f       	subi	r30, 0xFB	; 251
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	10 81       	ld	r17, Z
    position = segment_position [position];
 182:	e6 2f       	mov	r30, r22
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ef 5f       	subi	r30, 0xFF	; 255
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	d0 81       	ld	r29, Z
   
    // Pull LATCH, CLK, and DATA low    z GPIO
    GPIO_write_low(&PORTD, SEG_LATCH);
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	8b e2       	ldi	r24, 0x2B	; 43
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	85 e2       	ldi	r24, 0x25	; 37
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <SEG_update_shift_regs+0x3a>
 1b0:	00 00       	nop
 1b2:	c8 e0       	ldi	r28, 0x08	; 8
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        
        if((segments & 0b00000001 ) ==0)
 1b4:	10 fd       	sbrc	r17, 0
 1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <SEG_update_shift_regs+0x52>
        GPIO_write_low(&PORTB, SEG_DATA);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	85 e2       	ldi	r24, 0x25	; 37
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <SEG_update_shift_regs+0x5c>
        else
        GPIO_write_high(&PORTB, SEG_DATA);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	85 e2       	ldi	r24, 0x25	; 37
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <SEG_update_shift_regs+0x5e>
 1d4:	00 00       	nop

        // Wait 1 us
         _delay_us(1);

        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 1d6:	67 e0       	ldi	r22, 0x07	; 7
 1d8:	8b e2       	ldi	r24, 0x2B	; 43
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <SEG_update_shift_regs+0x70>
 1e6:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK low
         GPIO_write_low(&PORTD, SEG_CLK);
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	8b e2       	ldi	r24, 0x2B	; 43
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
         
        // Shift "segments"
        segments = segments >> 1;
 1f2:	16 95       	lsr	r17
 1f4:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us    
    _delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1f6:	f1 f6       	brne	.-68     	; 0x1b4 <SEG_update_shift_regs+0x42>
 1f8:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
       // Test LSB of "position" by & (faster) or % (slower) and...
       // ...output DATA value
      if((position & 0b00000001) == 0)
 1fa:	d0 fd       	sbrc	r29, 0
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <SEG_update_shift_regs+0x98>
      GPIO_write_low(&PORTB, SEG_DATA);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	85 e2       	ldi	r24, 0x25	; 37
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 208:	05 c0       	rjmp	.+10     	; 0x214 <SEG_update_shift_regs+0xa2>
      else
      GPIO_write_high(&PORTB, SEG_DATA);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <SEG_update_shift_regs+0xa4>
 21a:	00 00       	nop
       // Wait 1 us
        _delay_us(1);  
       // Pull CLK high
         GPIO_write_high(&PORTD, SEG_CLK);
 21c:	67 e0       	ldi	r22, 0x07	; 7
 21e:	8b e2       	ldi	r24, 0x2B	; 43
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <SEG_update_shift_regs+0xb6>
 22c:	00 00       	nop
       // Wait 1 us
        _delay_us(1);
       // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	8b e2       	ldi	r24, 0x2B	; 43
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
       // Shift "position"
       position = position >> 1;
 238:	d6 95       	lsr	r29
 23a:	c1 50       	subi	r28, 0x01	; 1
       
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 23c:	f1 f6       	brne	.-68     	; 0x1fa <SEG_update_shift_regs+0x88>
       position = position >> 1;
       
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	8b e2       	ldi	r24, 0x2B	; 43
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <SEG_update_shift_regs+0xd8>
 24e:	00 00       	nop
    // Wait 1 us
    _delay_us(1);

}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
